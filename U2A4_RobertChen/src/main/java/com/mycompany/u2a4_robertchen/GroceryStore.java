/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.u2a4_robertchen;

/**
 *
 * @author 335091559
 */
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import javax.swing.ButtonGroup;
public class GroceryStore extends javax.swing.JFrame {

    /**
     * Creates new form GroceryStore
     */
    ArrayList<Item> items = new ArrayList();
    ArrayList<Item> addedItem = new ArrayList();
    String[] options = {};
    String userInput, type, charO, charTw, charTh, charFo, skuInput, nameInput, categoryInput, quantityInput, minQuantityInput, vendorPriceInput,
            markupPercentageInput, currentDiscountInput;
    Character char1, char2, char3, char4, char5, char6, char7, char8;
    int charFi, charSi, charSe, charE, skuLength, nameLength, quantityInt, minQuantityInt, i = 0;
    double vendorPriceDouble, markupPercentageDouble, currentDiscountDouble, regularPrice, currentPrice;
    boolean valid = true;
    public GroceryStore() {
        initComponents();
        ButtonGroup group = new ButtonGroup();
        group.add(skuType);
        group.add(nameType);
    }
    
    public void readFile() {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("inventory.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] options = line.split(",");
                
                Item item = new Item(options[0], options[1], options[2], Integer.parseInt(options[3]), Integer.parseInt(options[4]), 
                        Double.parseDouble(options[5]), Double.parseDouble(options[6]), Double.parseDouble(options[7]), 
                        Double.parseDouble(options[8]), Double.parseDouble(options[9]));
                items.add(item);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void writeToFile(Item item) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter("inventory.txt", true));
            writer.write(item.toString());
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JTextArea();
        skuPrompt = new javax.swing.JLabel();
        sku = new javax.swing.JTextField();
        namePrompt = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        quantityPrompt = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        minimumPrompt = new javax.swing.JLabel();
        minimum = new javax.swing.JTextField();
        vendorPricePrompt = new javax.swing.JLabel();
        vendorPrice = new javax.swing.JTextField();
        markupPercentagePrompt = new javax.swing.JLabel();
        markupPercentage = new javax.swing.JTextField();
        discountPrompt = new javax.swing.JLabel();
        discount = new javax.swing.JTextField();
        input = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        output = new javax.swing.JTextField();
        prompt = new javax.swing.JLabel();
        selectType = new javax.swing.JLabel();
        skuType = new javax.swing.JToggleButton();
        nameType = new javax.swing.JToggleButton();
        addToInventory = new javax.swing.JButton();
        saveToFile = new javax.swing.JButton();
        displayInventory = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Yu Gothic Medium", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(255, 51, 51));
        title.setText("Grocery Store Inventory");

        list.setEditable(false);
        list.setColumns(20);
        list.setRows(5);
        jScrollPane1.setViewportView(list);

        skuPrompt.setText("Stock Keeping Unit (SKU): ");

        namePrompt.setText("Name:");

        quantityPrompt.setText("Quantity:");

        minimumPrompt.setText("Minimum Quantity:");

        vendorPricePrompt.setText("Vendor Price:");

        markupPercentagePrompt.setText("Markup Percentage:");

        discountPrompt.setText("Current Discount Percentage:");

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        output.setEditable(false);

        prompt.setText("Enter a SKU/Name:");

        selectType.setText("Select a Type to Search:");

        skuType.setText("SKU");
        skuType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skuTypeActionPerformed(evt);
            }
        });

        nameType.setText("Name");
        nameType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTypeActionPerformed(evt);
            }
        });

        addToInventory.setText("Add to Inventory");
        addToInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToInventoryActionPerformed(evt);
            }
        });

        saveToFile.setText("Save to File");
        saveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFileActionPerformed(evt);
            }
        });

        displayInventory.setText("Display Inventory");
        displayInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayInventoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(selectType)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(skuType)
                                    .addGap(18, 18, 18)
                                    .addComponent(nameType)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(displayInventory))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(prompt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(search)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(minimumPrompt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(minimum, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(skuPrompt)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(sku, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(addToInventory)
                                            .addGap(12, 12, 12)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(69, 69, 69)
                                            .addComponent(saveToFile))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(54, 54, 54)
                                            .addComponent(vendorPricePrompt)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(vendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(54, 54, 54)
                                            .addComponent(markupPercentagePrompt)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(markupPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(54, 54, 54)
                                            .addComponent(discountPrompt)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(namePrompt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(quantityPrompt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectType)
                    .addComponent(skuType)
                    .addComponent(nameType)
                    .addComponent(displayInventory))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search)
                    .addComponent(prompt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(skuPrompt)
                            .addComponent(sku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(namePrompt)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityPrompt)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minimumPrompt)
                            .addComponent(minimum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vendorPricePrompt)
                            .addComponent(vendorPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(markupPercentagePrompt)
                            .addComponent(markupPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountPrompt)
                            .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToInventory)
                    .addComponent(saveToFile))
                .addGap(18, 18, 18)
                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        userInput = input.getText();
        readFile();
        
        try {
            if (type.equals("sku")) {
                skuLength = userInput.length();
                if (getChar(userInput) && skuLength == 8) {
                    for (int i = 0; i < items.size(); i++) {
                        if (userInput.equals(items.get(i).getSKU())) {
                            output.setText("Item: " + items.get(i).toString());
                            break;
                        } else {
                            output.setText("This item does not exist in the inventory");
                        }
                    }
                } else {
                    output.setText("Please make sure the SKU is formatted properly (e.g. MEA-0001)");
                }
            } else if (type.equals("name")) {
                nameLength = userInput.length();
                if (nameLength <= 20) {
                    for (int x = 0; x < items.size(); x++) {
                        if (userInput.equals(items.get(x).getName())) {
                            output.setText("Item: " + items.get(x).toString());
                            break;
                        } else {
                            output.setText("This item does not exist in the inventory");
                        }
                    }
                } else {
                    output.setText("Name cannot have more than 20 characters");
                }
            }
        } catch(Exception e) {
            output.setText("Please make sure the SKU/Name field is filled out and is formatted properly (e.g. MEA-0001 or less than 21 characters)"); 
        }
    }//GEN-LAST:event_searchActionPerformed

    private void skuTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skuTypeActionPerformed
        prompt.setText("Enter a SKU:");
        type = "sku";
    }//GEN-LAST:event_skuTypeActionPerformed

    private void nameTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTypeActionPerformed
        prompt.setText("Enter a Name:");
        type = "name";
    }//GEN-LAST:event_nameTypeActionPerformed

    private void displayInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayInventoryActionPerformed
        list.setText("");
        try {
            BufferedReader reader = new BufferedReader(new FileReader("inventory.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                list.append(line + "\n");
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_displayInventoryActionPerformed

    private void addToInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToInventoryActionPerformed
        readFile();
        addedItem.clear();
        
        try {
            skuInput = sku.getText();
            nameInput = name.getText();
            nameLength = nameInput.length();
            quantityInput = quantity.getText();
            quantityInt = Integer.parseInt(quantityInput);
            minQuantityInput = minimum.getText();
            minQuantityInt = Integer.parseInt(minQuantityInput);
            vendorPriceInput = vendorPrice.getText();
            vendorPriceDouble = Double.parseDouble(vendorPriceInput);
            markupPercentageInput = markupPercentage.getText();
            markupPercentageDouble = Double.parseDouble(markupPercentageInput);
            currentDiscountInput = discount.getText();
            currentDiscountDouble = Double.parseDouble(currentDiscountInput);
            if (isValid(skuInput, nameInput, nameLength, quantityInt, minQuantityInt, 
                    vendorPriceDouble, markupPercentageDouble, currentDiscountDouble) && valid == true) {
                setCategory();
                Item newItem = new Item(skuInput, nameInput, categoryInput, quantityInt, minQuantityInt,
                        vendorPriceDouble, markupPercentageDouble, regularPrice, currentDiscountDouble, currentPrice);
                regularPrice = newItem.setRegularPrice(vendorPriceDouble, markupPercentageDouble);
                currentPrice = newItem.setCurrentPrice(regularPrice, currentDiscountDouble);
                addedItem.add(newItem);
                items.add(newItem);
                output.setText("Added to inventory");
                i = 0;
            }
        } catch(Exception e) {
            output.setText("Please make sure the fields are filled in and are formatted properly"); 
        }
    }//GEN-LAST:event_addToInventoryActionPerformed

    private void saveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToFileActionPerformed
        if (i == 0) {
            writeToFile(addedItem.get(0));
            output.setText("Item has been saved to the file");
        } else {
            output.setText("This item has already been saved to the file");
        }
        i = 1;
    }//GEN-LAST:event_saveToFileActionPerformed
    // Gets the characters of the user input
    public boolean getChar(String input) {
        char4 = input.charAt(3);
        charFo = Character.toString(char4).toUpperCase();
        if (Character.isLetter(input.charAt(0)) && Character.isLetter(input.charAt(1)) &&
                Character.isLetter(input.charAt(2)) && charFo.equals("-") && 
                Character.isDigit(input.charAt(5)) && Character.isDigit(input.charAt(6)) && 
                Character.isDigit(input.charAt(7))) {
            if (Character.isUpperCase(input.charAt(0)) && Character.isUpperCase(input.charAt(1)) &&
                Character.isUpperCase(input.charAt(2))) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    
    // Checks if all the inputs are valid to be added as an item
    public boolean isValid(String input, String name, int nameLength, int quantity, int minQuantity, double vendorPrice,
            double markupPercentage, double currentDiscount) {
        char1 = input.charAt(0);
        char2 = input.charAt(1);
        char3 = input.charAt(2);
        charO = Character.toString(char1).toUpperCase();
        charTw = Character.toString(char2).toUpperCase();
        charTh = Character.toString(char3).toUpperCase();
        if (getChar(input) == false) {
            output.setText("Please make sure the SKU is formatted properly (e.g. MEA-0001)");
            return false;
        }
        if (!charO.equals("V") && !charO.equals("F") && !charO.equals("M")) {
            output.setText("SKU must start with either VEG, MEA, or FRU");
            return false;
        }
        if (!charTw.equals("E") && !charTw.equals("R")) {
            output.setText("SKU must start with either VEG, MEA, or FRU");
            return false;
        }
        if (!charTh.equals("G") && !charTh.equals("U") && !charTh.equals("A")) {
            output.setText("SKU must start with either VEG, MEA, or FRU");
            return false;
        }
        if (nameLength > 20) {
            output.setText("Name cannot have more than 20 characters");
            return false;
        }
        if (quantity < minQuantity) {
            output.setText("Quantity cannot be less than minimum quantity");
            return false;
        }
        if (vendorPrice < 0) {
            output.setText("Vendor price cannot be less than zero");
            return false;
        }
        if (markupPercentage < 0) {
            output.setText("Markup percentage cannot be less than zero");
            return false;
        }
        if (currentDiscount < 0) {
            output.setText("Current discount percentage cannot be less than zero");
            return false;
        }
        
        for (int n = 0; n < items.size(); n++) {
            if (skuInput.equals(items.get(n).getSKU()) && nameInput.equals(items.get(n).getName())) {
                output.setText("An item with this SKU and name already exists");
                return false;
            } else if (skuInput.equals(items.get(n).getSKU())) {
                output.setText("An item with this SKU already exists");
                return false;
            } else if (nameInput.equals(items.get(n).getName())) {
                output.setText("An item with this name already exists");
                return false;
            }
        }
        return true;
    }
    
    // Sets the category based on the SKU
    public String setCategory() {
        if (charO.equals("V") && charTw.equals("E") && charTh.equals("G")) {
            return categoryInput = "VEGETABLE";
        } else if (charO.equals("F") && charTw.equals("R") && charTh.equals("U")) {
            return categoryInput = "FRUIT";
        } else if (charO.equals("M") && charTw.equals("E") && charTh.equals("A")) {
            return categoryInput = "MEAT";
        } else {
            return categoryInput = "filler";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GroceryStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GroceryStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GroceryStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GroceryStore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GroceryStore().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToInventory;
    private javax.swing.JTextField discount;
    private javax.swing.JLabel discountPrompt;
    private javax.swing.JButton displayInventory;
    private javax.swing.JTextField input;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea list;
    private javax.swing.JTextField markupPercentage;
    private javax.swing.JLabel markupPercentagePrompt;
    private javax.swing.JTextField minimum;
    private javax.swing.JLabel minimumPrompt;
    private javax.swing.JTextField name;
    private javax.swing.JLabel namePrompt;
    private javax.swing.JToggleButton nameType;
    private javax.swing.JTextField output;
    private javax.swing.JLabel prompt;
    private javax.swing.JTextField quantity;
    private javax.swing.JLabel quantityPrompt;
    private javax.swing.JButton saveToFile;
    private javax.swing.JButton search;
    private javax.swing.JLabel selectType;
    private javax.swing.JTextField sku;
    private javax.swing.JLabel skuPrompt;
    private javax.swing.JToggleButton skuType;
    private javax.swing.JLabel title;
    private javax.swing.JTextField vendorPrice;
    private javax.swing.JLabel vendorPricePrompt;
    // End of variables declaration//GEN-END:variables
}
